//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdminWpfApp.ManageUserProxy {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="TopographyAdminSvc", ConfigurationName="ManageUserProxy.IManageUser")]
    public interface IManageUser {
        
        [System.ServiceModel.OperationContractAttribute(Action="TopographyAdminSvc/IManageUser/EditUserName", ReplyAction="TopographyAdminSvc/IManageUser/EditUserNameResponse")]
        string EditUserName(string uid, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="TopographyAdminSvc/IManageUser/EditUserName", ReplyAction="TopographyAdminSvc/IManageUser/EditUserNameResponse")]
        System.Threading.Tasks.Task<string> EditUserNameAsync(string uid, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="TopographyAdminSvc/IManageUser/UserEnableDisable", ReplyAction="TopographyAdminSvc/IManageUser/UserEnableDisableResponse")]
        bool UserEnableDisable(string uid, bool enable);
        
        [System.ServiceModel.OperationContractAttribute(Action="TopographyAdminSvc/IManageUser/UserEnableDisable", ReplyAction="TopographyAdminSvc/IManageUser/UserEnableDisableResponse")]
        System.Threading.Tasks.Task<bool> UserEnableDisableAsync(string uid, bool enable);
        
        [System.ServiceModel.OperationContractAttribute(Action="TopographyAdminSvc/IManageUser/CreateUser", ReplyAction="TopographyAdminSvc/IManageUser/CreateUserResponse")]
        string CreateUser(string name, bool isEnabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="TopographyAdminSvc/IManageUser/CreateUser", ReplyAction="TopographyAdminSvc/IManageUser/CreateUserResponse")]
        System.Threading.Tasks.Task<string> CreateUserAsync(string name, bool isEnabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="TopographyAdminSvc/IManageUser/DeleteUser", ReplyAction="TopographyAdminSvc/IManageUser/DeleteUserResponse")]
        bool DeleteUser(string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="TopographyAdminSvc/IManageUser/DeleteUser", ReplyAction="TopographyAdminSvc/IManageUser/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(string uid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IManageUserChannel : AdminWpfApp.ManageUserProxy.IManageUser, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ManageUserClient : System.ServiceModel.ClientBase<AdminWpfApp.ManageUserProxy.IManageUser>, AdminWpfApp.ManageUserProxy.IManageUser {
        
        public ManageUserClient() {
        }
        
        public ManageUserClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ManageUserClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManageUserClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManageUserClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string EditUserName(string uid, string name) {
            return base.Channel.EditUserName(uid, name);
        }
        
        public System.Threading.Tasks.Task<string> EditUserNameAsync(string uid, string name) {
            return base.Channel.EditUserNameAsync(uid, name);
        }
        
        public bool UserEnableDisable(string uid, bool enable) {
            return base.Channel.UserEnableDisable(uid, enable);
        }
        
        public System.Threading.Tasks.Task<bool> UserEnableDisableAsync(string uid, bool enable) {
            return base.Channel.UserEnableDisableAsync(uid, enable);
        }
        
        public string CreateUser(string name, bool isEnabled) {
            return base.Channel.CreateUser(name, isEnabled);
        }
        
        public System.Threading.Tasks.Task<string> CreateUserAsync(string name, bool isEnabled) {
            return base.Channel.CreateUserAsync(name, isEnabled);
        }
        
        public bool DeleteUser(string uid) {
            return base.Channel.DeleteUser(uid);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(string uid) {
            return base.Channel.DeleteUserAsync(uid);
        }
    }
}
